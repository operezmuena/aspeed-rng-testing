From e27efeb32998834824fb7f1638879e4fc0f76f02 Mon Sep 17 00:00:00 2001
From: Oscar A Perez <linux@neuralgames.com>
Date: Tue, 28 Jan 2020 19:36:33 +0000
Subject: [PATCH] hwrng: Added rng mode to timeriomem

Signed-off-by: Oscar A Perez <linux@neuralgames.com>
---
 drivers/char/hw_random/timeriomem-rng.c | 72 +++++++++++++++++++++++--
 1 file changed, 67 insertions(+), 5 deletions(-)

diff --git a/drivers/char/hw_random/timeriomem-rng.c b/drivers/char/hw_random/timeriomem-rng.c
index e262445fed5f..928e9db36a95 100644
--- a/drivers/char/hw_random/timeriomem-rng.c
+++ b/drivers/char/hw_random/timeriomem-rng.c
@@ -31,9 +31,14 @@
 #include <linux/timeriomem-rng.h>
 
 struct timeriomem_rng_private {
+	struct device		*dev;
 	void __iomem		*io_base;
+	void __iomem		*io_reg;
 	ktime_t			period;
 	unsigned int		present:1;
+	unsigned int		mode;
+	unsigned int		mode_mask;
+	unsigned int		mode_shift;
 
 	struct hrtimer		timer;
 	struct completion	completion;
@@ -75,7 +80,7 @@ static int timeriomem_rng_read(struct hwrng *hwrng, void *data,
 		retval += sizeof(u32);
 		data += sizeof(u32);
 		max -= sizeof(u32);
-	} while (wait && max > sizeof(u32));
+	} while (wait && max >= sizeof(u32));
 
 	/*
 	 * Block any new callers until the RNG has had time to generate new
@@ -89,6 +94,18 @@ static int timeriomem_rng_read(struct hwrng *hwrng, void *data,
 	return retval;
 }
 
+static void timeriomem_rng_configure(struct timeriomem_rng_private *priv)
+{
+	u32 regval;
+
+	/* Set RNG mode */
+	regval = readl(priv->io_reg);
+	regval &= ~(priv->mode_mask);
+	regval |= (priv->mode << priv->mode_shift) & priv->mode_mask;
+	writel(regval, priv->io_reg);
+	dev_info(priv->dev, "Set RNG to mode %u\n", priv->mode);
+}
+
 static enum hrtimer_restart timeriomem_rng_trigger(struct hrtimer *timer)
 {
 	struct timeriomem_rng_private *priv
@@ -104,7 +121,7 @@ static int timeriomem_rng_probe(struct platform_device *pdev)
 {
 	struct timeriomem_rng_data *pdata = pdev->dev.platform_data;
 	struct timeriomem_rng_private *priv;
-	struct resource *res;
+	struct resource *res, *res_reg;
 	int err = 0;
 	int period;
 
@@ -113,9 +130,12 @@ static int timeriomem_rng_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
-	res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
-	if (!res)
-		return -ENXIO;
+	res = platform_get_resource_byname(pdev, IORESOURCE_MEM, "hwrng_data");
+	if (!res) {
+		res = platform_get_resource(pdev, IORESOURCE_MEM, 0);
+		if (!res)
+			return -ENXIO;
+	}
 
 	if (res->start % 4 != 0 || resource_size(res) < 4) {
 		dev_err(&pdev->dev,
@@ -123,6 +143,15 @@ static int timeriomem_rng_probe(struct platform_device *pdev)
 		return -EINVAL;
 	}
 
+	res_reg = platform_get_resource_byname(pdev, IORESOURCE_MEM,
+					       "hwrng_control");
+	if (!res_reg) {
+		res_reg = platform_get_resource(pdev, IORESOURCE_MEM, 1);
+		if (!res_reg)
+			dev_info(&pdev->dev,
+				 "hwrng_control resource not specified\n");
+	}
+
 	/* Allocate memory for the device structure (and zero it) */
 	priv = devm_kzalloc(&pdev->dev,
 			sizeof(struct timeriomem_rng_private), GFP_KERNEL);
@@ -130,6 +159,7 @@ static int timeriomem_rng_probe(struct platform_device *pdev)
 		return -ENOMEM;
 
 	platform_set_drvdata(pdev, priv);
+	priv->dev = &pdev->dev;
 
 	if (pdev->dev.of_node) {
 		int i;
@@ -147,6 +177,29 @@ static int timeriomem_rng_probe(struct platform_device *pdev)
 			priv->rng_ops.quality = i;
 		else
 			priv->rng_ops.quality = 0;
+
+		if (!of_property_read_u32(pdev->dev.of_node,
+					  "mode", &i))
+			priv->mode = (unsigned int)i;
+		else
+			priv->mode = U32_MAX;	/* mode not set */
+
+		if (priv->mode != U32_MAX) {
+			if (!of_property_read_u32(pdev->dev.of_node,
+						  "mode-mask", &i)) {
+				priv->mode_mask = (unsigned int)i;
+			} else {
+				priv->mode = U32_MAX;   /* mode not set */
+				dev_err(&pdev->dev, "missing mode_mask\n");
+			}
+			if (!of_property_read_u32(pdev->dev.of_node,
+						  "mode-shift", &i)) {
+				priv->mode_shift = i & 0x1f;
+			} else {
+				priv->mode = U32_MAX;   /* mode not set */
+				dev_err(&pdev->dev, "missing mode_shift\n");
+			}
+		}
 	} else {
 		period = pdata->period;
 		priv->rng_ops.quality = pdata->quality;
@@ -165,6 +218,15 @@ static int timeriomem_rng_probe(struct platform_device *pdev)
 		return PTR_ERR(priv->io_base);
 	}
 
+	if (res_reg) {
+		priv->io_reg = devm_ioremap_resource(&pdev->dev, res_reg);
+		if (IS_ERR(priv->io_reg))
+			return PTR_ERR(priv->io_reg);
+
+		if (priv->mode != U32_MAX)
+			timeriomem_rng_configure(priv);
+	}
+
 	/* Assume random data is already available. */
 	priv->present = 1;
 	complete(&priv->completion);
-- 
2.17.1

